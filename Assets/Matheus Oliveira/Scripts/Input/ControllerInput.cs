//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Matheus Oliveira/Scripts/ControllerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControllerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControllerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControllerInput"",
    ""maps"": [
        {
            ""name"": ""TopDownPlayer"",
            ""id"": ""189df98c-010d-4eea-8a25-798cde4b0d8c"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5c579aed-ce49-4ded-a78f-d15c08ccd88b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quadrado"",
                    ""type"": ""Button"",
                    ""id"": ""d65af345-1c73-4bdb-94c7-7d266440f361"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Triangulo"",
                    ""type"": ""Button"",
                    ""id"": ""7a280a89-eb43-48b2-9eac-79d9a568f83d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Xis"",
                    ""type"": ""Button"",
                    ""id"": ""dec9077b-64ca-43e0-a580-049125fcccaa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bola"",
                    ""type"": ""Button"",
                    ""id"": ""358b928c-4118-456a-a3c1-b3a5317b3c88"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""faf77032-d3b1-4229-adbd-0a2a4d597a4d"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controle"",
                    ""action"": ""Quadrado"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ba53b3b-1b22-4ae0-8e70-f028b22fcf23"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controle"",
                    ""action"": ""Triangulo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52d4ad40-b76c-43e4-9d48-5329859e3ca8"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controle"",
                    ""action"": ""Xis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""761ee574-1f9c-4493-84e1-e7fa8de8989f"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controle"",
                    ""action"": ""Bola"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""AnalogStick"",
                    ""id"": ""fce7cda3-17e6-4180-adb2-2f34b44d0070"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7b62bb69-b890-4897-ba14-dd754fe85156"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controle"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4f072b9e-8227-4f5a-9a62-133b25acce9a"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controle"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6f7d49cd-b7db-4a22-9891-38b164547933"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controle"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8778dedd-ef34-496a-b7e3-613766c7801e"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controle"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Controle"",
            ""bindingGroup"": ""Controle"",
            ""devices"": []
        }
    ]
}");
        // TopDownPlayer
        m_TopDownPlayer = asset.FindActionMap("TopDownPlayer", throwIfNotFound: true);
        m_TopDownPlayer_Movement = m_TopDownPlayer.FindAction("Movement", throwIfNotFound: true);
        m_TopDownPlayer_Quadrado = m_TopDownPlayer.FindAction("Quadrado", throwIfNotFound: true);
        m_TopDownPlayer_Triangulo = m_TopDownPlayer.FindAction("Triangulo", throwIfNotFound: true);
        m_TopDownPlayer_Xis = m_TopDownPlayer.FindAction("Xis", throwIfNotFound: true);
        m_TopDownPlayer_Bola = m_TopDownPlayer.FindAction("Bola", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TopDownPlayer
    private readonly InputActionMap m_TopDownPlayer;
    private List<ITopDownPlayerActions> m_TopDownPlayerActionsCallbackInterfaces = new List<ITopDownPlayerActions>();
    private readonly InputAction m_TopDownPlayer_Movement;
    private readonly InputAction m_TopDownPlayer_Quadrado;
    private readonly InputAction m_TopDownPlayer_Triangulo;
    private readonly InputAction m_TopDownPlayer_Xis;
    private readonly InputAction m_TopDownPlayer_Bola;
    public struct TopDownPlayerActions
    {
        private @ControllerInput m_Wrapper;
        public TopDownPlayerActions(@ControllerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_TopDownPlayer_Movement;
        public InputAction @Quadrado => m_Wrapper.m_TopDownPlayer_Quadrado;
        public InputAction @Triangulo => m_Wrapper.m_TopDownPlayer_Triangulo;
        public InputAction @Xis => m_Wrapper.m_TopDownPlayer_Xis;
        public InputAction @Bola => m_Wrapper.m_TopDownPlayer_Bola;
        public InputActionMap Get() { return m_Wrapper.m_TopDownPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TopDownPlayerActions set) { return set.Get(); }
        public void AddCallbacks(ITopDownPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_TopDownPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TopDownPlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Quadrado.started += instance.OnQuadrado;
            @Quadrado.performed += instance.OnQuadrado;
            @Quadrado.canceled += instance.OnQuadrado;
            @Triangulo.started += instance.OnTriangulo;
            @Triangulo.performed += instance.OnTriangulo;
            @Triangulo.canceled += instance.OnTriangulo;
            @Xis.started += instance.OnXis;
            @Xis.performed += instance.OnXis;
            @Xis.canceled += instance.OnXis;
            @Bola.started += instance.OnBola;
            @Bola.performed += instance.OnBola;
            @Bola.canceled += instance.OnBola;
        }

        private void UnregisterCallbacks(ITopDownPlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Quadrado.started -= instance.OnQuadrado;
            @Quadrado.performed -= instance.OnQuadrado;
            @Quadrado.canceled -= instance.OnQuadrado;
            @Triangulo.started -= instance.OnTriangulo;
            @Triangulo.performed -= instance.OnTriangulo;
            @Triangulo.canceled -= instance.OnTriangulo;
            @Xis.started -= instance.OnXis;
            @Xis.performed -= instance.OnXis;
            @Xis.canceled -= instance.OnXis;
            @Bola.started -= instance.OnBola;
            @Bola.performed -= instance.OnBola;
            @Bola.canceled -= instance.OnBola;
        }

        public void RemoveCallbacks(ITopDownPlayerActions instance)
        {
            if (m_Wrapper.m_TopDownPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITopDownPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_TopDownPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TopDownPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TopDownPlayerActions @TopDownPlayer => new TopDownPlayerActions(this);
    private int m_ControleSchemeIndex = -1;
    public InputControlScheme ControleScheme
    {
        get
        {
            if (m_ControleSchemeIndex == -1) m_ControleSchemeIndex = asset.FindControlSchemeIndex("Controle");
            return asset.controlSchemes[m_ControleSchemeIndex];
        }
    }
    public interface ITopDownPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnQuadrado(InputAction.CallbackContext context);
        void OnTriangulo(InputAction.CallbackContext context);
        void OnXis(InputAction.CallbackContext context);
        void OnBola(InputAction.CallbackContext context);
    }
}
